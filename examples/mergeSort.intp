val mergeSort = func(array) {
  return mergeSortRec(array, 0, size(array) - 1)
}

val mergeSortRec = func(array, p, r) {
  if (p < r) {
    var q = (p + r) / 2
    mergeSortRec(array, p, q)
    mergeSortRec(array, q + 1, r)
    merge(array, p, q, r)
    return array
  } else {
    return array
  }
}

val merge = func(array, p, q, r) {
  val size1 = q - p + 1
  var array1 = []
  for var i = 0, var j = p; i < size1; i += 1, j += 1 {
    array1 += [array[j]]
  }
  val size2 = r - q
  var array2 = []
  for var i = 0, var j = q + 1; i < size2; i += 1, j += 1 {
    array2 += [array[j]]
  }
  var i = 0
  var j = 0
  while p <= r {
    if (i == size1) {
      array[p] = array2[j]
      j += 1
    } else if (j == size2) {
      array[p] = array1[i]
      i += 1
    } else if (array1[i] < array2[j]) {
      array[p] = array1[i]
      i += 1
    } else {
      array[p] = array2[j]
      j += 1
    }
    p += 1
  }
  return array
}


assert(mergeSort([]) == [])
assert(mergeSort([1]) == [1])
assert(mergeSort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])
assert(mergeSort([5, 4, 3]) == [3, 4, 5])
assert(mergeSort([5, 10, 2, 6, 7, 10, 2]) == [2, 2, 5, 6, 7, 10, 10])
assert(mergeSort([1, 1, 2, 1]) == [1, 1, 1, 2])
assert(mergeSort([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5])