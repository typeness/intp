val quickSort = func(array) {
  return quickSortRec(array, 0, size(array) - 1)
}

val quickSortRec = func(array, p, r) {
  if (p < r) {
    val pivot = partition(array, p, r)
    quickSortRec(array, p, pivot - 1)
    quickSortRec(array, pivot + 1, r)
    return array
  } else {
    return array
  }
}

val partition = func(array, p, r) {
  val pivot = array[r]
  var i = p - 1
  var j = r
  while true {
    i += 1
    while array[i] < pivot {
      i += 1
    }
    if (j > p) {
      j -= 1
    }
    while j > p and array[j] > pivot {
      j -= 1
    }
    if (i < j) {
      val temp = array[i]
      array[i] = array[j]
      array[j] = temp
    } else {
      break
    }
  }
  array[r] = array[i]
  array[i] = pivot
  return i
}


assert(quickSort([]) == [])
assert(quickSort([1]) == [1])
assert(quickSort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])
assert(quickSort([5, 4, 3]) == [3, 4, 5])
assert(quickSort([5, 10, 2, 6, 7, 10, 2]) == [2, 2, 5, 6, 7, 10, 10])
assert(quickSort([1, 1, 2, 1]) == [1, 1, 1, 2])
assert(quickSort([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5])