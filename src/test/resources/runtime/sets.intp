val contains = func(array, elem) {
  var i = 0
  while (i < size(array)) {
    if (array[i] == elem) {
      return true
    }
    i = i + 1
  }
  return false
}

val setUnion = func(a, b) {
  var result = []
  var i = 0
  while (i < size(a)) {
    if (not contains(result, a[i])) {
      result = result + [a[i]]
    }
    i = i + 1
  }
  i = 0
  while (i < size(b)) {
    if (not contains(result, b[i])) {
      result = result + [b[i]]
    }
    i = i + 1
  }
  return result
}

val setIntersection = func(a, b) {
  var result = []
  var i = 0
  while (i < size(a)) {
    if (contains(b, a[i]) and not contains(result, a[i])) {
      result = result + [a[i]]
    }
    i = i + 1
  }
  return result
}

val setDifference = func(a, b) {
  var result = []
  var i = 0
  while (i < size(a)) {
    if (not contains(b, a[i]) and not contains(result, a[i])) {
      result = result + [a[i]]
    }
    i = i + 1
  }
  return result
}

var a = [1, 2, 3, 4, 5, 2]
var b = [3, 4, 5, 6, 7, -1]
assert(setUnion(a, b) == [1, 2, 3, 4, 5, 6, 7, -1])
assert(setIntersection(a, b) == [3, 4, 5])
assert(setDifference(a, b) == [1, 2])